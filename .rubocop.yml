# The behavior of RuboCop can be controlled via the .rubocop.yml
# configuration file. It makes it possible to enable/disable
# certain cops (checks) and to alter their behavior if they accept
# any parameters. The file can be placed either in your home
# directory or in some project directory.
#
# RuboCop will start looking for the configuration file in the directory
# where the inspected file is and continue its way up to the root directory.
#
# See https://docs.rubocop.org/rubocop/configuration

AllCops:
  TargetRubyVersion: 3.0.4

Layout/ClosingParenthesisIndentation:
  Enabled: false

Layout/DotPosition:
  EnforcedStyle: trailing

# Fails on AppVeyor builds
Layout/EndOfLine:
  Enabled: false

Layout/FirstParameterIndentation:
  Enabled: false

Layout/FirstArrayElementIndentation:
  Enabled: false

Layout/HeredocIndentation:
  Enabled: false

Layout/LineLength:
  Max: 100

Layout/MultilineMethodCallIndentation:
  Enabled: false

Layout/MultilineOperationIndentation:
  Enabled: false

Layout/SpaceBeforeFirstArg:
  Exclude:
    - '*.gemspec'

Lint/AmbiguousBlockAssociation:
  Enabled: false

Lint/AmbiguousRegexpLiteral:
  Enabled: false

Lint/AssignmentInCondition:
  Enabled: false

Lint/Void:
  Enabled: false

Metrics/AbcSize:
  Enabled: false

Metrics/BlockLength:
  Enabled: false

Metrics/MethodLength:
  Max: 20

Metrics/ModuleLength:
  Enabled: false

Naming/FileName:
  Exclude:
    - 'template-dir/hooks/*'
    - 'Gemfile'
    - 'Rakefile'
    - '*.gemspec'

# Renaming `has_something?` to `something?` obfuscates whether it is a "is-a" or
# a "has-a" relationship.
Naming/PredicateName:
  Enabled: false

# commit_sha1 is indeed how we want to write such a variable, so ignore this cop
Naming/VariableNumber:
  Enabled: false

# Enforcing this results in a lot of unnecessary indentation.
Style/ClassAndModuleChildren:
  Enabled: false

Style/Documentation:
  Exclude:
    - 'spec/overcommit/**/*'

Style/FormatString:
  Enabled: false

# There are a number of situations where this makes code less readable or
# disrupts the visual flow of code.
Style/GuardClause:
  Enabled: false

Style/IfUnlessModifier:
  Enabled: false

# We want to allow multi-line lambdas using the `->` syntax which Rubocop
# doesn't allow. We're also not too worried about people using `lambda` for
# single-line lambdas either.
Style/Lambda:
  Enabled: false

Style/Next:
  Enabled: false

# Calling .zero? instead of comparing `== 0` seems unnecessarily verbose
Style/NumericPredicate:
  Enabled: false

Style/ParallelAssignment:
  Enabled: false

# Prefer curly braces except for %i/%w/%W, since those return arrays.
Style/PercentLiteralDelimiters:
  PreferredDelimiters:
    '%': '{}'
    '%i': '[]'
    '%q': '{}'
    '%Q': '{}'
    '%r': '{}'
    '%s': '()'
    '%w': '[]'
    '%W': '[]'
    '%x': '{}'

Style/RescueModifier:
  Exclude:
    - 'bin/overcommit'

Style/SignalException:
  Enabled: false

# Forcing a particular name (e.g. |a, e|) for inject methods prevents you from
# choosing intention-revealing names.
Style/SingleLineBlockParams:
  Enabled: false

Style/SpecialGlobalVars:
  Enabled: false

Style/SymbolArray:
  Enabled: false

Style/TrailingCommaInArguments:
  Enabled: false

Style/TrailingCommaInArrayLiteral:
  Enabled: false

Style/TrailingCommaInHashLiteral:
  Enabled: false